###############################################################################
#
# IAR C/C++ Compiler V6.20.1.931/W32 for MSP430           14/Mar/2015  23:44:44
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.20
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\Source\ZASA_router.c
#    Command line  =  
#        -f C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\..\Source\ZASA.cfg
#        (-DZACCEL_BUF_LEN=128 -DHOST_MT_BAUD=9600 -DHOST_MT_RX_OLD=1
#        "-DHOST_MT_RX_FULL=(ZACCEL_BUF_LEN-1)" -DZACCEL_NV_CHANLIST=0x00008000
#        -DZACCEL_NV_PANID=0x0EEE)
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\Source\ZASA_router.c -D
#        ROUTER -D APP_BLINK_LEDS -lC
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\Router\List\ --remarks
#        --diag_suppress Pe068 -o
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\Router\Obj\ --debug
#        -D__MSP430F2274__ --warnings_are_errors -e --double=32 --clib -I
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\ -I
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\..\Source\ -I
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\..\..\common\zaccel\
#        -I C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\..\..\common\mt\ -I
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\..\..\target\include\
#        -I
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\..\..\target\cc2480\
#        --reduce_stack_usage -Ohz --require_prototypes
#    List file     =  
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\Router\List\ZASA_router.lst
#    Object file   =  
#        C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\IAR\Router\Obj\ZASA_router.r43
#
###############################################################################

C:\Users\Madmilla\Desktop\eZ430-RF2480\ZASA\Source\ZASA_router.c
      1          /**************************************************************************************************
      2              Filename:       ZASA_router.c
      3              Revised:        $Date: 2008-04-10 19:47:13 -0700 (Thu, 10 Apr 2008) $
      4              Revision:       $Revision: 16806 $
      5          
      6              Description:
      7          
      8              This file contains the main functionality for the Router of the ZACCEL application.
      9          
     10          
     11              Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
     12          
     13              IMPORTANT: Your use of this Software is limited to those specific rights
     14              granted under the terms of a software license agreement between the user
     15              who downloaded the software, his/her employer (which must be your employer)
     16              and Texas Instruments Incorporated (the "License").  You may not use this
     17              Software unless you agree to abide by the terms of the License. The License
     18              limits your use, and you acknowledge, that the Software may not be modified,
     19              copied or distributed unless embedded on a Texas Instruments microcontroller
     20              or used solely and exclusively in conjunction with a Texas Instruments radio
     21              frequency transceiver, which is integrated into your product.  Other than for
     22              the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23              works of, modify, distribute, perform, display or sell this Software and/or
     24              its documentation for any purpose.
     25          
     26              YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27              PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28              INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29              NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30              TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31              NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32              LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33              INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34              OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35              OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36              (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38              Should you have any questions regarding your right to use this Software,
     39              contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          
     47          #include "zaccel.h"
     48          #include "hal_board.h"

   \                                 In  segment DATA16_AN, at 0x21
   \   unsigned char volatile P1OUT
   \                     P1OUT:
   \   000000                DS8 1
     49          #include "mt.h"
     50          #include "ZASA.h"
     51          #include "sapi.h"
     52          
     53          /* ------------------------------------------------------------------------------------------------
     54           *                                           Global Variables
     55           * ------------------------------------------------------------------------------------------------
     56           */
     57          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     58          uint8 appFlags = appIdleF;
   \                     appFlags:
   \   000000                DS8 1
     59          
     60          /* ------------------------------------------------------------------------------------------------
     61           *                                           Local Variables
     62           * ------------------------------------------------------------------------------------------------
     63           */
     64          

   \                                 In  segment DATA16_C, align 1, align-sorted
     65          static const uint8 srceEP[] = {
   \                     srceEP:
   \   000000   01100F030001 DC8 1, 16, 15, 3, 0, 1, 0, 0, 1, 1, 0
   \            0000010100  
     66            SRCE_ENDPOINT_ID,
     67            ZASA_PROFILE_ID_LSB,
     68            ZASA_PROFILE_ID_MSB,
     69            SRCE_DEVICE_ID_LSB,
     70            SRCE_DEVICE_ID_MSB,
     71            SRCE_DEVICE_VERSION,
     72            SRCE_LATENCY,
     73            SRCE_CLUSTER_IN_CNT,
     74            SRCE_CLUSTER_OUT_CNT,
     75            SRCE_REPORT_ID_LSB,
     76            SRCE_REPORT_ID_MSB
     77          };
     78          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     79          static uint16 tempOffset = 0xFFFF;
   \                     tempOffset:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for tempOffset>`
     80          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     81          static AppState appState;
   \                     appState:
   \   000000                DS8 1
     82          #ifdef APP_DATA_CNF
     83          static uint8 appMsgRtry;
     84          #endif

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     85          static uint8 appMsgHandle;
   \                     appMsgHandle:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     86          static uint8 srceReport[SRCE_REPORT_SZ];
   \                     srceReport:
   \   000000                DS8 2
     87          
     88          /* ------------------------------------------------------------------------------------------------
     89           *                                           Local Functions
     90           * ------------------------------------------------------------------------------------------------
     91           */
     92          
     93          // Triggered by HAL flags.
     94          static void appExec(void);
     95          static void appBtnPress(void);
     96          
     97          // Helper functions for appExec().
     98          static void appJoinFail(void);
     99          
    100          // Helper functions for appBtnPress().
    101          static void appStartRequest(void);
    102          static void appToggleJoin(void);
    103          
    104          // Triggered by ZACCEL flags or ZACCEL response.
    105          static void appReset(void);
    106          static void appStart(void);
    107          #ifdef APP_DATA_CNF
    108          static void appDataCnf(void);
    109          #endif
    110          static void appSrceBind(void);
    111          static void appSrceData(void);
    112          #ifdef APP_BLINK_LEDS
    113          static void appLedBlink(uint8 led);
    114          #endif
    115          
    116          /**************************************************************************************************
    117           * @fn          appInit
    118           *
    119           * @brief       This function is the host application initialization.
    120           *
    121           * input parameters
    122           *
    123           * None.
    124           *
    125           * output parameters
    126           *
    127           * None.
    128           *
    129           * @return      None.
    130           **************************************************************************************************
    131           */

   \                                 In  segment CODE, align 2
    132          void appInit(void)
   \                     appInit:
    133          {
    134          #ifdef APP_BLINK_LEDS
    135            // Setup the LED blink at 1-Hz.
    136            halTimerSet (HAL_IDX_TIMER_LED, APP_BLINK_INTERVAL, HAL_TIMER_AUTO);
   \   000000   5E43         MOV.B   #0x1, R14
   \   000002   1D43         MOV.W   #0x1, R13
   \   000004   4C43         MOV.B   #0x0, R12
   \   000006   B012....     CALL    #halTimerSet
    137          #endif
    138          
    139            HAL_ENABLE_INTERRUPTS();
   \   00000A   32D2         eint
    140          
    141            appState = appIniting;
   \   00000C   C243....     MOV.B   #0x0, &appState
    142          }
   \   000010   3041         RET
    143          
    144          /**************************************************************************************************
    145           * @fn          appExecHal
    146           *
    147           * @brief       This function is the ZASA executive for HAL events.
    148           *
    149           * input parameters
    150           *
    151           * None.
    152           *
    153           * output parameters
    154           *
    155           * None.
    156           *
    157           * @return      TRUE if a HAL event was processed; FALSE otherwise.
    158           **************************************************************************************************
    159           */

   \                                 In  segment CODE, align 2
    160          uint16 appExecHal(void)
   \                     appExecHal:
    161          {
   \   000000   0A12         PUSH.W  R10
    162            uint16 event = HAL_EVT_NONE;
    163          
    164            if (halEventFlags & HAL_EVT_TIMER_LED)
   \   000002   92B3....     BIT.W   #0x1, &halEventFlags
   \   000006   0528         JNC     ??appExecHal_2
    165            {
    166              event = HAL_EVT_TIMER_LED;
   \   000008   1A43         MOV.W   #0x1, R10
    167          #ifdef APP_BLINK_LEDS
    168              appLedBlink (APP_STAT_LED);
   \   00000A   4C43         MOV.B   #0x0, R12
   \   00000C   B012....     CALL    #appLedBlink
   \   000010   353C         JMP     ??appExecHal_1
    169          #endif
    170            }
    171            else if (halEventFlags & HAL_EVT_TIMER_APP)
   \                     ??appExecHal_2:
   \   000012   A2B3....     BIT.W   #0x2, &halEventFlags
   \   000016   0428         JNC     ??appExecHal_3
    172            {
    173              event = HAL_EVT_TIMER_APP;
   \   000018   2A43         MOV.W   #0x2, R10
    174              appExec();
   \   00001A   B012....     CALL    #appExec
   \   00001E   2E3C         JMP     ??appExecHal_1
    175            }
    176            else if (halEventFlags & HAL_EVT_TIMER_BTN)
   \                     ??appExecHal_3:
   \   000020   A2B2....     BIT.W   #0x4, &halEventFlags
   \   000024   0E28         JNC     ??appExecHal_4
    177            {
    178              event = HAL_EVT_TIMER_BTN;
   \   000026   2A42         MOV.W   #0x4, R10
    179              appBtnPress();
   \   000028   5E42....     MOV.B   &appState, R14
   \   00002C   5E83         SUB.B   #0x1, R14
   \   00002E   0624         JEQ     ??appExecHal_5
   \   000030   7E800600     SUB.B   #0x6, R14
   \   000034   2320         JNE     ??appExecHal_1
   \   000036   B012....     CALL    #appToggleJoin
   \   00003A   203C         JMP     ??appExecHal_1
   \                     ??appExecHal_5:
   \   00003C   B012....     CALL    #appStartRequest
   \   000040   1D3C         JMP     ??appExecHal_1
    180            }
    181            else if (halEventFlags & HAL_EVT_BTN_PRESS)
   \                     ??appExecHal_4:
   \   000042   B2B00001.... BIT.W   #0x100, &halEventFlags
   \   000048   1128         JNC     ??appExecHal_6
    182            {
    183              event = HAL_EVT_BTN_PRESS;
   \   00004A   3A400001     MOV.W   #0x100, R10
    184              halTimerSet (HAL_IDX_TIMER_BTN, APP_BTN_INTERVAL, 0);
   \   00004E   4E43         MOV.B   #0x0, R14
   \   000050   2D43         MOV.W   #0x2, R13
   \   000052   6C43         MOV.B   #0x2, R12
   \   000054   B012....     CALL    #halTimerSet
    185          
    186              // Immediately turn of LEDs when user starts a join process.
    187              if (appState == appWaiting)
   \   000058   D293....     CMP.B   #0x1, &appState
   \   00005C   0F20         JNE     ??appExecHal_1
    188              {
    189                // Stop the LED blink during joining.
    190                halTimerSet (HAL_IDX_TIMER_LED, 0, 0);
   \   00005E   B012....     CALL    #?Subroutine4
    191                HAL_TURN_OFF_GRN();
   \                     ??CrossCallReturnLabel_4:
   \   000062   E2C32100     BIC.B   #0x2, &0x21
    192                HAL_TURN_OFF_RED();
   \   000066   D2C32100     BIC.B   #0x1, &0x21
   \   00006A   083C         JMP     ??appExecHal_1
    193              }
    194            }
    195            else if (halEventFlags & HAL_EVT_ADC)
   \                     ??appExecHal_6:
   \   00006C   B2B00002.... BIT.W   #0x200, &halEventFlags
   \   000072   0F28         JNC     ??appExecHal_7
    196            {
    197              event = HAL_EVT_ADC;
   \   000074   3A400002     MOV.W   #0x200, R10
    198              appSrceData();
   \   000078   B012....     CALL    #appSrceData
    199            }
    200          
    201            /* Since HAL event flags are set at the interrupt level, they must only be cleared within
    202             * a critical section.
    203             */
    204            if (event != HAL_EVT_NONE)
    205            {
    206              halIntState_t s;
    207              HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??appExecHal_1:
   \   00007C   0F42         MOV.W   SR, R15
   \   00007E   32C2         dint
   \   000080   0343         nop
    208              event = halEventFlags & event;
   \   000082   1E42....     MOV.W   &halEventFlags, R14
    209              halEventFlags ^= event;
   \   000086   0EFA         AND.W   R10, R14
   \   000088   82EE....     XOR.W   R14, &halEventFlags
    210              HAL_EXIT_CRITICAL_SECTION(s);
   \   00008C   024F         MOV.W   R15, SR
    211              return TRUE;
   \   00008E   1C43         MOV.W   #0x1, R12
   \   000090   013C         JMP     ??appExecHal_8
    212            }
    213          
    214            return FALSE;
   \                     ??appExecHal_7:
   \   000092   0C43         MOV.W   #0x0, R12
   \                     ??appExecHal_8:
   \   000094   3A41         POP.W   R10
   \   000096   3041         RET
   \   000098                REQUIRE P1OUT
    215          }

   \                                 In  segment CODE, align 2
   \                     ?Subroutine4:
   \   000000   4E43         MOV.B   #0x0, R14
   \   000002   0D43         MOV.W   #0x0, R13
   \   000004   4C43         MOV.B   #0x0, R12
   \   000006   3040....     BR      #halTimerSet
    216          
    217          /**************************************************************************************************
    218           * @fn          appExecHost
    219           *
    220           * @brief       This function is the ZASA executive for ZACCEL events.
    221           *
    222           * input parameters
    223           *
    224           * None.
    225           *
    226           * output parameters
    227           *
    228           * None.
    229           *
    230           * @return      TRUE if a ZACCEL event was processed; FALSE otherwise.
    231           **************************************************************************************************
    232           */

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   000000   3D400A00     MOV.W   #0xa, R13
   \   000004                REQUIRE ??Subroutine3_0
   \   000004                // Fall through to label ??Subroutine3_0

   \                                 In  segment CODE, align 2
   \                     ??Subroutine3_0:
   \   000000   5C43         MOV.B   #0x1, R12
   \   000002   3040....     BR      #halTimerSet

   \                                 In  segment CODE, align 2
    233          uint16 appExecHost(void)
   \                     appExecHost:
    234          {
   \   000000   0A12         PUSH.W  R10
    235            uint16 event = ZACCEL_EVT_NONE;
    236          
    237            zaccelPoll();
   \   000002   B012....     CALL    #zaccelPoll
    238          
    239            if (zaccelEvtFlags & ZACCEL_SYS_RESET_IND)
   \   000006   8293....     CMP.W   #0x0, &zaccelEvtFlags
   \   00000A   0534         JGE     ??appExecHost_0
    240            {
    241              event = ZACCEL_SYS_RESET_IND;
   \   00000C   3A400080     MOV.W   #0x8000, R10
    242              appReset();
   \   000010   B012....     CALL    #appReset
   \   000014   1C3C         JMP     ??appExecHost_1
    243            }
    244            else if (zaccelEvtFlags & ZACCEL_START_CNF)
   \                     ??appExecHost_0:
   \   000016   92B3....     BIT.W   #0x1, &zaccelEvtFlags
   \   00001A   0828         JNC     ??appExecHost_2
    245            {
    246              event = ZACCEL_START_CNF;
   \   00001C   1A43         MOV.W   #0x1, R10
    247              if (appState == appJoining)
   \   00001E   F2900300.... CMP.B   #0x3, &appState
   \   000024   1420         JNE     ??appExecHost_1
    248              {
    249                appStart();
   \   000026   B012....     CALL    #appStart
   \   00002A   113C         JMP     ??appExecHost_1
    250              }
    251            }
    252            else if (zaccelEvtFlags & ZACCEL_BIND_CNF)
   \                     ??appExecHost_2:
   \   00002C   A2B3....     BIT.W   #0x2, &zaccelEvtFlags
   \   000030   0A28         JNC     ??appExecHost_3
    253            {
    254              event = ZACCEL_BIND_CNF;
   \   000032   2A43         MOV.W   #0x2, R10
    255              // Setup an auto-repeating timer to send periodic status reports OTA.
    256              halTimerSet (HAL_IDX_TIMER_APP, APP_REPORT_INTERVAL, HAL_TIMER_AUTO);
   \   000034   5E43         MOV.B   #0x1, R14
   \   000036   B012....     CALL    #?Subroutine3
    257              // But send a report immediately from here to reduce latency of 1st report from a new node.
    258              appSrceData();
   \                     ??CrossCallReturnLabel_8:
   \   00003A   B012....     CALL    #appSrceData
    259              appState = appRunning;
   \   00003E   F2400700.... MOV.B   #0x7, &appState
   \   000044   043C         JMP     ??appExecHost_1
    260            }
    261            else if (zaccelEvtFlags & ZACCEL_SEND_DATA_CNF)
   \                     ??appExecHost_3:
   \   000046   B2B2....     BIT.W   #0x8, &zaccelEvtFlags
   \   00004A   0528         JNC     ??appExecHost_4
    262            {
    263              event = ZACCEL_SEND_DATA_CNF;
   \   00004C   3A42         MOV.W   #0x8, R10
    264          #ifdef APP_DATA_CNF
    265              appDataCnf();
    266          #endif
    267            }
    268          
    269            if (event != ZACCEL_EVT_NONE)
    270            {
    271              zaccelEvtFlags ^= event;
   \                     ??appExecHost_1:
   \   00004E   82EA....     XOR.W   R10, &zaccelEvtFlags
    272              return TRUE;
   \   000052   1C43         MOV.W   #0x1, R12
   \   000054   013C         JMP     ??appExecHost_5
    273            }
    274          
    275            return FALSE;
   \                     ??appExecHost_4:
   \   000056   0C43         MOV.W   #0x0, R12
   \                     ??appExecHost_5:
   \   000058   3A41         POP.W   R10
   \   00005A   3041         RET
    276          }
    277          
    278          /**************************************************************************************************
    279           * @fn          appExec
    280           *
    281           * @brief       This function is the ZASA executive run by a periodic timer event.
    282           *
    283           * input parameters
    284           *
    285           * None.
    286           *
    287           * output parameters
    288           *
    289           * None.
    290           *
    291           * @return      None.
    292           **************************************************************************************************
    293           */

   \                                 In  segment CODE, align 2
    294          static void appExec(void)
   \                     appExec:
    295          {
    296            switch (appState)
   \   000000   5E42....     MOV.B   &appState, R14
   \   000004   4E83         SUB.B   #0x0, R14
   \   000006   0B24         JEQ     ??appExec_0
   \   000008   5E83         SUB.B   #0x1, R14
   \   00000A   0924         JEQ     ??appExec_0
   \   00000C   6E83         SUB.B   #0x2, R14
   \   00000E   0C24         JEQ     ??appExec_1
   \   000010   6E83         SUB.B   #0x2, R14
   \   000012   1F24         JEQ     ??appExec_2
   \   000014   5E83         SUB.B   #0x1, R14
   \   000016   2624         JEQ     ??appExec_3
   \   000018   5E83         SUB.B   #0x1, R14
   \   00001A   2624         JEQ     ??appExec_4
   \   00001C   3041         RET
    297            {
    298              case appIniting:
    299              case appWaiting:
    300                // Not expected in this state, so just stop the timer in case it is auto-repeating.
    301                halTimerSet (HAL_IDX_TIMER_APP, 0, 0);
   \                     ??appExec_0:
   \   00001E   4E43         MOV.B   #0x0, R14
   \   000020   0D43         MOV.W   #0x0, R13
   \   000022   5C43         MOV.B   #0x1, R12
   \   000024   3040....     BR      #halTimerSet
    302                break;
    303          
    304              case appJoining:
    305                // Attempting to join did not succeed within the allowed APP_JOIN_WAIT time.
    306                appJoinFail();
   \                     ??appExec_1:
   \   000028   4C43         MOV.B   #0x0, R12
   \   00002A   B012....     CALL    #zb_GetDeviceInfo
   \   00002E   5E42....     MOV.B   &zaccelNwkState, R14
   \   000032   7E900500     CMP.B   #0x5, R14
   \   000036   0B24         JEQ     ??appExec_5
   \   000038   7E900600     CMP.B   #0x6, R14
   \   00003C   0824         JEQ     ??appExec_5
   \   00003E   7E900700     CMP.B   #0x7, R14
   \   000042   0524         JEQ     ??appExec_5
   \   000044   7E900900     CMP.B   #0x9, R14
   \   000048   0224         JEQ     ??appExec_5
   \   00004A   3040....     BR      #appStartRequest
   \                     ??appExec_5:
   \   00004E   3040....     BR      #appStart
    307                break;
    308          
    309              case appBinding:
    310                halTimerSet (HAL_IDX_TIMER_APP, APP_BIND_WAIT, 0);
   \                     ??appExec_2:
   \   000052   4E43         MOV.B   #0x0, R14
   \   000054   3D401E00     MOV.W   #0x1e, R13
   \   000058   B012....     CALL    #??Subroutine3_0
    311                appState = appBindWaiting;
   \                     ??CrossCallReturnLabel_6:
   \   00005C   F2400600.... MOV.B   #0x6, &appState
    312                break;
   \   000062   3041         RET
    313          
    314              case appBindWaiting:
    315                appSrceBind();
   \                     ??appExec_3:
   \   000064   3040....     BR      #appSrceBind
    316                break;
    317          
    318              case appRunning:
    319                if (appFlags & appSendingF)
   \                     ??appExec_4:
   \   000068   F2B02000.... BIT.B   #0x20, &appFlags
   \   00006E   022C         JC      ??appExec_6
    320                {
    321          #ifdef APP_DATA_CNF
    322                  appDataCnf();
    323          #endif
    324                }
    325                else
    326                {
    327                  appSrceData();
   \   000070   B012....     CALL    #appSrceData
    328                }
    329                break;
    330          
    331            default:
    332              break;
    333            }
    334          }
   \                     ??appExec_6:
   \   000074   3041         RET
    335          
    336          /**************************************************************************************************
    337           * @fn          appBtnPress
    338           *
    339           * @brief       This function acts on a button press.
    340           *
    341           * input parameters
    342           *
    343           * None.
    344           *
    345           * output parameters
    346           *
    347           * None.
    348           *
    349           * @return      None.
    350           **************************************************************************************************
    351           */
    352          static void appBtnPress(void)
    353          {
    354            switch (appState)
    355            {
    356              case appIniting:
    357                // Do not act on a button press in this state which should be only momentary after powerup.
    358                break;
    359          
    360              case appWaiting:
    361                appStartRequest();
    362                break;
    363          
    364              case appJoining:
    365              case appJoinWaiting:
    366              case appBinding:
    367              case appBindWaiting:
    368                // Do not act on a button press in these states.
    369                break;
    370          
    371              case appRunning:
    372                appToggleJoin();
    373                break;
    374          
    375              default:
    376                break;
    377            }
    378          }
    379          
    380          /**************************************************************************************************
    381           * @fn          appJoinFail
    382           *
    383           * @brief       This function executes the specified behaviour when a join attempt fails.
    384           *
    385           * input parameters
    386           *
    387           * None.
    388           *
    389           * output parameters
    390           *
    391           * None.
    392           *
    393           * @return      None.
    394           **************************************************************************************************
    395           */
    396          static void appJoinFail(void)
    397          {
    398            /* MT_SAPI_START_CNF can be missed by the race condition between re-registering the Endpoint
    399             * with the SAPI after the device does a reset to restore/auto-join and the join success.
    400             * This check catches the situation when a join succeeds before this host can even register
    401             * the Endpoint.
    402             */
    403            zb_GetDeviceInfo (ZB_INFO_DEV_STATE);
    404            if (ZACCEL_NWK_CONN)
    405            {
    406              appStart();
    407              return;
    408            }
    409          
    410            // If attempting to join as an FFD/Router fails, restart again.
    411            appStartRequest();
    412          }
    413          
    414          /**************************************************************************************************
    415           * @fn          appStartRequest
    416           *
    417           * @brief       This function acts on a button press.
    418           *
    419           * input parameters
    420           *
    421           * None.
    422           *
    423           * output parameters
    424           *
    425           * None.
    426           *
    427           * @return      None.
    428           **************************************************************************************************
    429           */

   \                                 In  segment CODE, align 2
    430          static void appStartRequest(void)
   \                     appStartRequest:
    431          {
   \   000000   2183         SUB.W   #0x2, SP
    432            uint8 tmp = ZG_DEVICETYPE_ROUTER;
   \   000002   D1430000     MOV.B   #0x1, 0(SP)
    433            zb_WriteConfiguration (ZCD_NV_LOGICAL_TYPE, 1, &tmp);
   \   000006   0E41         MOV.W   SP, R14
   \   000008   5D43         MOV.B   #0x1, R13
   \   00000A   7C408700     MOV.B   #0x87, R12
   \   00000E   B012....     CALL    #zb_WriteConfiguration
    434            zb_StartRequest();
   \   000012   B012....     CALL    #zb_StartRequest
    435            appState = appJoining;
   \   000016   F2400300.... MOV.B   #0x3, &appState
    436          
    437            /* The ZACCEL will try to join indefinitely, so the host is setting a timer in order to take
    438             * action if the join attempt does not succeed within a reasonable amount of time.
    439             */
    440            halTimerSet (HAL_IDX_TIMER_APP, APP_JOIN_TIME, 0);
   \   00001C   4E43         MOV.B   #0x0, R14
   \   00001E   3D400600     MOV.W   #0x6, R13
   \   000022   B012....     CALL    #??Subroutine3_0
    441          }
   \                     ??CrossCallReturnLabel_7:
   \   000026   2153         ADD.W   #0x2, SP
   \   000028   3041         RET
    442          
    443          /**************************************************************************************************
    444           * @fn          appToggleJoin
    445           *
    446           * @brief       This function acts on a request to toggle the permit join state of the ZACCEL.
    447           *
    448           * input parameters
    449           *
    450           * None.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment CODE, align 2
    459          static void appToggleJoin(void)
   \                     appToggleJoin:
    460          {
    461            // Toggle the "permit joining" of the ZACCEL and set the LED behavior accordingly.
    462            if (appFlags & appPermittingF)
   \   000000   F2B04000.... BIT.B   #0x40, &appFlags
   \   000006   0F28         JNC     ??appToggleJoin_0
    463            {
    464              appFlags &= ~appPermittingF;
   \   000008   F2C04000.... BIC.B   #0x40, &appFlags
    465              zb_PermitJoiningRequest (zaccelNwkAddr, APP_DENY_JOIN);
   \   00000E   4D43         MOV.B   #0x0, R13
   \   000010   1C42....     MOV.W   &zaccelNwkAddr, R12
   \   000014   B012....     CALL    #zb_PermitJoiningRequest
    466          
    467              // A Router-Source device starts blinking the Green LED when not permitting join.
    468              HAL_TURN_OFF_GRN();
   \   000018   E2C32100     BIC.B   #0x2, &0x21
    469          
    470              // Setup the LED blink at 1-Hz.
    471              halTimerSet (HAL_IDX_TIMER_LED, APP_BLINK_INTERVAL, HAL_TIMER_AUTO);
   \   00001C   5E43         MOV.B   #0x1, R14
   \   00001E   1D43         MOV.W   #0x1, R13
   \   000020   4C43         MOV.B   #0x0, R12
   \   000022   3040....     BR      #halTimerSet
    472            }
    473            else
    474            {
    475              appFlags |= appPermittingF;
   \                     ??appToggleJoin_0:
   \   000026   F2D04000.... BIS.B   #0x40, &appFlags
    476              zb_PermitJoiningRequest (zaccelNwkAddr, APP_PMT_JOIN);
   \   00002C   7D43         MOV.B   #0xff, R13
   \   00002E   1C42....     MOV.W   &zaccelNwkAddr, R12
   \   000032   B012....     CALL    #zb_PermitJoiningRequest
    477          
    478              // Stop the LED blink.
    479              halTimerSet (HAL_IDX_TIMER_LED, 0, 0);
   \   000036   B012....     CALL    #?Subroutine4
    480          
    481              // A Router-Source device sets the Green LED solid on when permitting join.
    482              HAL_TURN_ON_GRN();
   \                     ??CrossCallReturnLabel_5:
   \   00003A   E2D32100     BIS.B   #0x2, &0x21
    483            }
    484          }
   \   00003E   3041         RET
   \   000040                REQUIRE P1OUT
    485          
    486          /**************************************************************************************************
    487           * @fn          appReset
    488           *
    489           * @brief       This function is the host action on a ZACCEL reset.
    490           *
    491           * input parameters
    492           *
    493           * None.
    494           *
    495           * output parameters
    496           *
    497           * None.
    498           *
    499           * @return      None.
    500           **************************************************************************************************
    501           */

   \                                 In  segment CODE, align 2
    502          static void appReset(void)
   \                     appReset:
    503          {
   \   000000   3182         SUB.W   #0x8, SP
    504            // No previously received indication flag can be valid after the ZACCEL resets.
    505            zaccelIndFlags = ZACCEL_STATUS_CLEAR;
   \   000002   8243....     MOV.W   #0x0, &zaccelIndFlags
    506          
    507            /* No ZigBee Endpoints (not even the Simple Descriptor) are not stored in the ZACCEL NV.
    508             * Therefore, the host must re-register anytime that the ZACCEL resets.
    509             */
    510            zb_SapiAppRegister (srceEP);
   \   000006   3C40....     MOV.W   #srceEP, R12
   \   00000A   B012....     CALL    #zb_SapiAppRegister
    511          
    512            switch (appState)
   \   00000E   5E42....     MOV.B   &appState, R14
   \   000012   4E83         SUB.B   #0x0, R14
   \   000014   0324         JEQ     ??appReset_0
   \   000016   5E83         SUB.B   #0x1, R14
   \   000018   0C24         JEQ     ??appReset_1
   \   00001A   203C         JMP     ??appReset_2
    513            {
    514              case appIniting:
    515                {
    516                  // Reset Network NV items.
    517                  uint8 val = ZCD_STARTOPT_CLEAR_CONFIG;
   \                     ??appReset_0:
   \   00001C   D1430200     MOV.B   #0x1, 0x2(SP)
    518                  zb_WriteConfiguration (ZCD_NV_STARTUP_OPTION, 1, &val);
   \   000020   0E41         MOV.W   SP, R14
   \   000022   2E53         ADD.W   #0x2, R14
   \   000024   B012....     CALL    #?Subroutine2
    519                  zb_SystemReset();
   \                     ??CrossCallReturnLabel_2:
   \   000028   B012....     CALL    #zb_SystemReset
    520          
    521                  appState = appWaiting;
   \   00002C   D243....     MOV.B   #0x1, &appState
    522                }
    523                break;
   \   000030   153C         JMP     ??appReset_2
    524          
    525              case appWaiting:
    526                // The last step of the appIniting above was to reset the ZACCEL.
    527                {
    528                  // Configure the Host Application-specific defaults from ZASA.cfg into the ZACCEL.
    529                  uint16 val16 = ZACCEL_NV_PANID;
   \                     ??appReset_1:
   \   000032   B140EE0E0000 MOV.W   #0xeee, 0(SP)
    530                  zb_WriteConfiguration (ZCD_NV_PANID, 2, &val16);
   \   000038   0E41         MOV.W   SP, R14
   \   00003A   6D43         MOV.B   #0x2, R13
   \   00003C   7C408300     MOV.B   #0x83, R12
   \   000040   B012....     CALL    #zb_WriteConfiguration
    531                  uint32 val32 = ZACCEL_NV_CHANLIST;
   \   000044   B14000800400 MOV.W   #0x8000, 0x4(SP)
   \   00004A   81430600     MOV.W   #0x0, 0x6(SP)
    532                  zb_WriteConfiguration (ZCD_NV_CHANLIST, 4, &val32);
   \   00004E   0E41         MOV.W   SP, R14
   \   000050   2E52         ADD.W   #0x4, R14
   \   000052   6D42         MOV.B   #0x4, R13
   \   000054   7C408400     MOV.B   #0x84, R12
   \   000058   B012....     CALL    #zb_WriteConfiguration
    533                }
    534                break;
    535          
    536              default:
    537                break;
    538            }
    539          }
   \                     ??appReset_2:
   \   00005C   3152         ADD.W   #0x8, SP
   \   00005E   3041         RET

   \                                 In  segment CODE, align 2
   \                     ?Subroutine2:
   \   000000   5D43         MOV.B   #0x1, R13
   \   000002   7C400300     MOV.B   #0x3, R12
   \   000006   3040....     BR      #zb_WriteConfiguration
    540          
    541          /**************************************************************************************************
    542           * @fn          appStart
    543           *
    544           * @brief       This function is the host application registration with the ZACCEL SAPI.
    545           *
    546           * input parameters
    547           *
    548           * None.
    549           *
    550           * output parameters
    551           *
    552           * None.
    553           *
    554           * @return      None.
    555           **************************************************************************************************
    556           */

   \                                 In  segment CODE, align 2
    557          static void appStart(void)
   \                     appStart:
    558          {
   \   000000   2183         SUB.W   #0x2, SP
    559            // And now allow the ZACCEL slave to NV restore and auto re-start on resets.
    560            uint8 val = ZCD_STARTOPT_AUTO_START;
   \   000002   E1420000     MOV.B   #0x4, 0(SP)
    561            zb_WriteConfiguration (ZCD_NV_STARTUP_OPTION, 1, &val);
   \   000006   0E41         MOV.W   SP, R14
   \   000008   B012....     CALL    #?Subroutine2
    562          
    563            zb_GetDeviceInfo (ZB_INFO_DEV_STATE);
   \                     ??CrossCallReturnLabel_3:
   \   00000C   4C43         MOV.B   #0x0, R12
   \   00000E   B012....     CALL    #zb_GetDeviceInfo
    564            zb_GetDeviceInfo (ZB_INFO_SHORT_ADDR);
   \   000012   6C43         MOV.B   #0x2, R12
   \   000014   B012....     CALL    #zb_GetDeviceInfo
    565          
    566            appFlags &= ~appPermittingF;
   \   000018   F2C04000.... BIC.B   #0x40, &appFlags
    567            appToggleJoin();  // This will set permit joining allowed and set LEDs accordingly.
   \   00001E   B012....     CALL    #appToggleJoin
    568          
    569            zb_AllowBind (APP_DENY_BIND);
   \   000022   4C43         MOV.B   #0x0, R12
   \   000024   B012....     CALL    #zb_AllowBind
    570            appSrceBind();
   \   000028   B012....     CALL    #appSrceBind
    571          }
   \   00002C   2153         ADD.W   #0x2, SP
   \   00002E   3041         RET
    572          
    573          #ifdef APP_DATA_CNF
    574          /**************************************************************************************************
    575           * @fn          appDataCnf
    576           *
    577           * @brief       This function is the host application action upon receiving a message confirmation.
    578           *
    579           * input parameters
    580           *
    581           * None.
    582           *
    583           * output parameters
    584           *
    585           * None.
    586           *
    587           * @return      None.
    588           **************************************************************************************************
    589           */
    590          static void appDataCnf(void)
    591          {
    592            if (zaccelIndFlags & ZACCEL_SEND_SUCCESS)
    593            {
    594              zaccelIndFlags &= ~ZACCEL_SEND_SUCCESS;
    595              appFlags &= ~appSendingF;
    596          #ifdef APP_BLINK_LEDS
    597              appLedBlink (APP_DATA_LED);
    598          #endif
    599            }
    600            else if ((appMsgRtry == 0) || (--appMsgRtry == 0))
    601            {
    602              appFlags &= ~appSendingF;
    603              appSrceBind();  // When a message confirmation fails, attempt to re-bind.
    604            }
    605            else
    606            {
    607              // Do not increment the message handle since this is the same message, only a re-try.
    608              zb_SendDataRequest (ZB_BINDING_ADDR, SRCE_REPORT_ID, appMsgHandle,
    609                                  AF_ACK_REQUEST, AF_DEFAULT_RADIUS, SRCE_REPORT_SZ, srceReport);
    610            }
    611          }
    612          #endif
    613          
    614          /**************************************************************************************************
    615           * @fn          appSrceBind
    616           *
    617           * @brief       This function is the host application to request an Endpoint binding.
    618           *
    619           * input parameters
    620           *
    621           * None.
    622           *
    623           * output parameters
    624           *
    625           * None.
    626           *
    627           * @return      None.
    628           **************************************************************************************************
    629           */

   \                                 In  segment CODE, align 2
    630          static void appSrceBind(void)
   \                     appSrceBind:
    631          {
   \   000000   3182         SUB.W   #0x8, SP
    632            /* IEEE address of the device to establish the binding with. Set the destIEEE to NULL
    633             * in order to bind with any other device that is in the Allow Binding Mode.
    634             */
    635            uint8 destIEEE[Z_EXTADDR_LEN] = { 0, 0, 0, 0, 0, 0, 0, 0 };
   \   000002   0C41         MOV.W   SP, R12
   \   000004   3E42         MOV.W   #0x8, R14
   \   000006   B012....     CALL    #?ClearMemoryBytes
    636            zb_BindDevice (TRUE, SRCE_REPORT_ID, destIEEE);
   \   00000A   0E41         MOV.W   SP, R14
   \   00000C   1D43         MOV.W   #0x1, R13
   \   00000E   5C43         MOV.B   #0x1, R12
   \   000010   B012....     CALL    #zb_BindDevice
    637            halTimerSet (HAL_IDX_TIMER_APP, APP_BIND_TIME, 0);
   \   000014   4E43         MOV.B   #0x0, R14
   \   000016   B012....     CALL    #?Subroutine3
    638            appState = appBinding;
   \                     ??CrossCallReturnLabel_9:
   \   00001A   F2400500.... MOV.B   #0x5, &appState
    639          }
   \   000020   3152         ADD.W   #0x8, SP
   \   000022   3041         RET
    640          
    641          /**************************************************************************************************
    642           * @fn          appSrceData
    643           *
    644           * @brief       This function is the host application to process received data.
    645           *
    646           * input parameters
    647           *
    648           * None.
    649           *
    650           * output parameters
    651           *
    652           * None.
    653           *
    654           * @return      None.
    655           **************************************************************************************************
    656           */

   \                                 In  segment CODE, align 2
    657          static void appSrceData(void)
   \                     appSrceData:
    658          {
   \   000000   0A12         PUSH.W  R10
    659            uint16 tmp;
    660          
    661            switch (appFlags & (appTempF | appBusVF))
   \   000002   5E42....     MOV.B   &appFlags, R14
   \   000006   7EF00300     AND.B   #0x3, R14
   \   00000A   0524         JEQ     ??appSrceData_0
   \   00000C   5E83         SUB.B   #0x1, R14
   \   00000E   0824         JEQ     ??appSrceData_1
   \   000010   5E83         SUB.B   #0x1, R14
   \   000012   2624         JEQ     ??appSrceData_2
   \   000014   4F3C         JMP     ??appSrceData_3
    662            {
    663              case appIdleF:   // Idle - not reading the ADC.
    664                // Setup to sample temperature.
    665                appFlags |= appTempF;
   \                     ??appSrceData_0:
   \   000016   D2D3....     BIS.B   #0x1, &appFlags
    666                halReadTemp();
   \   00001A   B012....     CALL    #halReadTemp
    667                break;
   \   00001E   4A3C         JMP     ??appSrceData_3
    668          
    669              case appTempF:   // Measuring air temperature.
    670                appFlags &= ~appTempF;
   \                     ??appSrceData_1:
   \   000020   D2C3....     BIC.B   #0x1, &appFlags
    671          
    672                // oC = ((halAdcVal / 1024) * 1500mV) - 986mV) * 1/3.55mV = halAdcVal * 423 /1024 - 278
    673                // Rewritten to (A10 - 673) * 423 / 1024 to prevent overflow
    674                tmp = ((halAdcVal - 673) * 423) >> 10;
   \   000024   1C42....     MOV.W   &halAdcVal, R12
   \   000028   3C505FFD     ADD.W   #0xfd5f, R12
   \   00002C   3E40A701     MOV.W   #0x1a7, R14
   \   000030   B012....     CALL    #?Mul16
   \   000034   0A4C         MOV.W   R12, R10
   \   000036   8A10         SWPB    R10
   \   000038   7AF3         AND.B   #0xff, R10
   \   00003A   0A11         RRA.W   R10
   \   00003C   0A11         RRA.W   R10
    675                if (tempOffset != 0xFFFF)
   \   00003E   B293....     CMP.W   #0xffff, &tempOffset
   \   000042   0724         JEQ     ??appSrceData_4
    676                {
    677                  tmp += tempOffset / 10;
   \   000044   1C42....     MOV.W   &tempOffset, R12
   \   000048   3E400A00     MOV.W   #0xa, R14
   \   00004C   B012....     CALL    #?DivMod16u
   \   000050   4A5C         ADD.B   R12, R10
    678                }
    679                srceReport[SRCE_REPORT_TEMP] = (uint8)tmp;
   \                     ??appSrceData_4:
   \   000052   C24A....     MOV.B   R10, &srceReport
    680          
    681                // Setup to sample bus voltage.
    682                appFlags |= appBusVF;
   \   000056   E2D3....     BIS.B   #0x2, &appFlags
    683                halReadBusV();
   \   00005A   B012....     CALL    #halReadBusV
    684                break;
   \   00005E   2A3C         JMP     ??appSrceData_3
    685          
    686              case appBusVF:  // Measuring bus voltage.
    687                appFlags &= ~appBusVF;
   \                     ??appSrceData_2:
   \   000060   E2C3....     BIC.B   #0x2, &appFlags
    688          
    689                /* halAdcVal contains measurement of AVcc/2
    690                 * halAdcVal is in range 0 to 1023 indicating voltage from 0 to 1.5V
    691                 * voltage = (halAdcVal * 2 * 1.5)/1023 volts
    692                 * add 50 mV to round up
    693                 * we will multiply by this by 10 to allow units of 0.1 volts
    694                 */
    695                tmp = (halAdcVal * 30 + 512) >> 10;   // Convert to units of 0.1V
    696                srceReport[SRCE_REPORT_BUSV] = (uint8)tmp;
   \   000064   1E42....     MOV.W   &halAdcVal, R14
   \   000068   0E5E         RLA.W   R14
   \   00006A   0F4E         MOV.W   R14, R15
   \   00006C   0E5E         RLA.W   R14
   \   00006E   0F5E         ADD.W   R14, R15
   \   000070   0E5E         RLA.W   R14
   \   000072   0F5E         ADD.W   R14, R15
   \   000074   0E5E         RLA.W   R14
   \   000076   0E5F         ADD.W   R15, R14
   \   000078   3E500002     ADD.W   #0x200, R14
   \   00007C   8E10         SWPB    R14
   \   00007E   7EF3         AND.B   #0xff, R14
   \   000080   0E11         RRA.W   R14
   \   000082   0E11         RRA.W   R14
   \   000084   C24E....     MOV.B   R14, &srceReport + 1
    697          
    698          #ifdef APP_DATA_CNF
    699                // Increment the message handle so that the next message is unique.
    700                zb_SendDataRequest (ZB_BINDING_ADDR, SRCE_REPORT_ID, appMsgHandle++,
    701                                    AF_ACK_REQUEST, AF_DEFAULT_RADIUS, SRCE_REPORT_SZ, srceReport);
    702          
    703                /* An FFD will always be awake and ready to poll for it.
    704                 */
    705                appMsgRtry = APP_RETRY_CNT;
    706                appFlags |= appSendingF;
    707          #else
    708                zb_SendDataRequest (ZB_BINDING_ADDR, SRCE_REPORT_ID, appMsgHandle++,
    709                                    0, AF_DEFAULT_RADIUS, SRCE_REPORT_SZ, srceReport);
   \   000088   5E42....     MOV.B   &appMsgHandle, R14
   \   00008C   4F4E         MOV.B   R14, R15
   \   00008E   5F53         ADD.B   #0x1, R15
   \   000090   C24F....     MOV.B   R15, &appMsgHandle
   \   000094   3012....     PUSH.W  #srceReport
   \   000098   6312         PUSH.B  #0x2
   \   00009A   70120A00     PUSH.B  #0xa
   \   00009E   4F43         MOV.B   #0x0, R15
   \   0000A0   1D43         MOV.W   #0x1, R13
   \   0000A2   3C40FEFF     MOV.W   #0xfffe, R12
   \   0000A6   B012....     CALL    #zb_SendDataRequest
   \   0000AA   31500600     ADD.W   #0x6, SP
    710          #ifdef APP_BLINK_LEDS
    711                appLedBlink (APP_DATA_LED);
   \   0000AE   5C43         MOV.B   #0x1, R12
   \   0000B0   B012....     CALL    #appLedBlink
    712          #endif
    713          #endif
    714                break;
    715            }
    716          }
   \                     ??appSrceData_3:
   \   0000B4   3A41         POP.W   R10
   \   0000B6   3041         RET
    717          
    718          #ifdef APP_BLINK_LEDS
    719          /**************************************************************************************************
    720           * @fn          appLedBlink
    721           *
    722           * @brief       Blink the LED specified.
    723           *
    724           * input parameters
    725           *
    726           * @param       led - Which LED to control: Status or Data.
    727           *
    728           * output parameters
    729           *
    730           * None.
    731           *
    732           * @return      None.
    733           **************************************************************************************************
    734           */

   \                                 In  segment CODE, align 2, keep-with-next
    735          static void appLedBlink(uint8 led)
   \                     appLedBlink:
    736          {
    737            switch (led)
   \   000000   4C83         SUB.B   #0x0, R12
   \   000002   0324         JEQ     ??appLedBlink_0
   \   000004   5C83         SUB.B   #0x1, R12
   \   000006   1F24         JEQ     ??appLedBlink_1
   \   000008   3041         RET
    738            {
    739              case APP_STAT_LED:
    740                if (ZACCEL_NWK_CONN)
   \                     ??appLedBlink_0:
   \   00000A   5E42....     MOV.B   &zaccelNwkState, R14
   \   00000E   7E900500     CMP.B   #0x5, R14
   \   000012   0924         JEQ     ??appLedBlink_2
   \   000014   7E900600     CMP.B   #0x6, R14
   \   000018   0624         JEQ     ??appLedBlink_2
   \   00001A   7E900700     CMP.B   #0x7, R14
   \   00001E   0324         JEQ     ??appLedBlink_2
   \   000020   7E900900     CMP.B   #0x9, R14
   \   000024   0920         JNE     ??appLedBlink_3
    741                {
    742                  HAL_TURN_ON_GRN();
   \                     ??appLedBlink_2:
   \   000026   E2D32100     BIS.B   #0x2, &0x21
    743                  halDelay (APP_BLINK_ON_TIME, TRUE);
   \   00002A   5D43         MOV.B   #0x1, R13
   \   00002C   5C43         MOV.B   #0x1, R12
   \   00002E   B012....     CALL    #halDelay
    744                  HAL_TURN_OFF_GRN();
   \   000032   E2C32100     BIC.B   #0x2, &0x21
   \   000036   3041         RET
    745                }
    746                else
    747                {
    748                  HAL_TURN_ON_GRN();
   \                     ??appLedBlink_3:
   \   000038   E2D32100     BIS.B   #0x2, &0x21
    749                  HAL_TURN_ON_RED();
   \   00003C   B012....     CALL    #?Subroutine1
    750                  halDelay (APP_BLINK_ON_TIME, TRUE);
    751                  HAL_TURN_OFF_GRN();
   \                     ??CrossCallReturnLabel_1:
   \   000040   E2C32100     BIC.B   #0x2, &0x21
    752                  HAL_TURN_OFF_RED();
   \   000044   ....         JMP     ?Subroutine0
    753                }
    754                break;
    755          
    756              case APP_DATA_LED:
    757                HAL_TURN_ON_RED();
   \                     ??appLedBlink_1:
   \   000046   B012....     CALL    #?Subroutine1
    758                halDelay (APP_BLINK_ON_TIME, TRUE);
    759                HAL_TURN_OFF_RED();
   \                     ??CrossCallReturnLabel_0:
   \   00004A                REQUIRE ?Subroutine0
   \   00004A                REQUIRE P1OUT
   \   00004A                // Fall through to label ?Subroutine0
    760                break;
    761          
    762              default:
    763                break;
    764            }
    765          }

   \                                 In  segment CODE, align 2
   \                     ?Subroutine0:
   \   000000   D2C32100     BIC.B   #0x1, &0x21
   \   000004   3041         RET

   \                                 In  segment CODE, align 2
   \                     ?Subroutine1:
   \   000000   D2D32100     BIS.B   #0x1, &0x21
   \   000004   5D43         MOV.B   #0x1, R13
   \   000006   5C43         MOV.B   #0x1, R12
   \   000008   3040....     BR      #halDelay

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for tempOffset>`:
   \   000000   FFFF         DC16 65535

   \                                 In  segment DATA16_C, align 1, align-sorted
   \   000000   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0
   \            0000        
    766          #endif

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   appExec
        2   -> appSrceBind
        2   -> appSrceData
        2   -> appStart
        2   -> appStartRequest
        2   -> halTimerSet
        2   -> zb_GetDeviceInfo
      4   appExecHal
        4   -> appExec
        4   -> appLedBlink
        4   -> appSrceData
        4   -> appStartRequest
        4   -> appToggleJoin
        4   -> halTimerSet
      4   appExecHost
        4   -> appReset
        4   -> appSrceData
        4   -> appStart
        4   -> halTimerSet
        4   -> zaccelPoll
      2   appInit
        2   -> halTimerSet
      2   appLedBlink
        2   -> halDelay
     10   appReset
       10   -> zb_SapiAppRegister
       10   -> zb_SystemReset
       10   -> zb_WriteConfiguration
     10   appSrceBind
       10   -> halTimerSet
       10   -> zb_BindDevice
     10   appSrceData
        4   -> appLedBlink
        4   -> halReadBusV
        4   -> halReadTemp
       10   -> zb_SendDataRequest
      4   appStart
        4   -> appSrceBind
        4   -> appToggleJoin
        4   -> zb_AllowBind
        4   -> zb_GetDeviceInfo
        4   -> zb_WriteConfiguration
      4   appStartRequest
        4   -> halTimerSet
        4   -> zb_StartRequest
        4   -> zb_WriteConfiguration
      2   appToggleJoin
        2   -> halTimerSet
        2   -> zb_PermitJoiningRequest


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
       2  ?<Initializer for tempOffset>
       6  ??Subroutine3_0
       6  ?Subroutine0
      12  ?Subroutine1
      10  ?Subroutine2
       4  ?Subroutine3
      10  ?Subroutine4
       1  P1OUT
     118  appExec
     152  appExecHal
      92  appExecHost
       1  appFlags
      18  appInit
      74  appLedBlink
       1  appMsgHandle
      96  appReset
      36  appSrceBind
     184  appSrceData
      48  appStart
      42  appStartRequest
       1  appState
      64  appToggleJoin
      11  srceEP
       2  srceReport
       2  tempOffset

 
 972 bytes in segment CODE
   1 byte  in segment DATA16_AN
  19 bytes in segment DATA16_C
   2 bytes in segment DATA16_I
   2 bytes in segment DATA16_ID
   5 bytes in segment DATA16_Z
 
 972 bytes of CODE  memory
  21 bytes of CONST memory
   7 bytes of DATA  memory (+ 1 byte shared)

Errors: none
Warnings: none
